import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Scatterplot from '../components/scatterplot/Scatterplot'
import ScatterPoints from '../components/scatterpoints/ScatterPoints'
import LineGraph from '../components/linegraph/LineGraph'
import Axis from '../components/axis/Axis'
import TimeAxis from '../components/timeaxis/TimeAxis'
import { useEffect, useState } from 'react'
export default function TimeGraph() {
    const [data, setData]=useState([])
    const [timeArr,setTimeArr]=useState([])
    const [openArr,setOpenArr]=useState([])
    const [closeArr,setCloseArr]=useState([])
    const [highArr,setHighArr]=useState([])
    const [lowArr,setLowArr]=useState([])
    const [volumeArr,setVolumeArr]=useState([])
    const [loading, setLoading]=useState(true)

    let intervalList=[1,5,15,30]
    let interval=intervalList[3]
    let symbol='AMC'
    let apiKey=process.env.alphakey;
    let url=`https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${symbol}&interval=${interval}min&apikey=${apiKey}`
    

    useEffect(()=>{
        setLoading(true)
        fetch(url).then(resp=>resp.json()).then(data=>{
            setOpenArr(Object.values(data[`Time Series (${interval}min)`]).map(obj=>   parseFloat(obj['1. open'])).reverse())
            setHighArr(Object.values(data[`Time Series (${interval}min)`]).map(obj=>   parseFloat(obj['2. high'])).reverse())
            setLowArr(Object.values(data[`Time Series (${interval}min)`]).map(obj=>    parseFloat(obj['3. low'])).reverse())
            setCloseArr(Object.values(data[`Time Series (${interval}min)`]).map(obj=>  parseFloat(obj['4. close'])).reverse())
            setVolumeArr(Object.values(data[`Time Series (${interval}min)`]).map(obj=> parseFloat(obj['5. volume'])).reverse())
            let timeValues=Object.keys(data[`Time Series (${interval}min)`]).reverse()
            setTimeArr(timeValues.map(item=>{
                let newDate= new Date(item)
                return newDate.getTime()
            }))
            return
        }).catch(err=>console.log(err))
        setLoading(false)
    },[])

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>  
        { !loading&&
                <TimeAxis data_x={timeArr} data_y={closeArr} chartWidth={1300} chartHeight={600} xTitle={'30min interval'} yTitle={'Price'} gTitle={'AMC STOCK PRICE'}/>
        }
    </div>
  )
}



// const range = (start, stop, points) =>{
//     const incr=(stop-start)/(points-1);
//     let arr= Array.from({length: points}, (x, i) => i*incr+start)
//     return arr;
//   }

//   const timeRange = (start, stop, points) =>{
//     const incr=(stop.getTime()-start.getTime())/(points-1);
//     let arr= Array.from({length: points}, (x, i) => new Date(i*incr+start.getTime()))
//     return arr;
//   }

// const mindate = new Date(2012,0,1);
// const maxdate = new Date(2012,0,31);
// let data_time=timeRange(mindate,maxdate,25)
// let data_x2=range(0,2*3.141592654,25)
// let data_y2=data_x2.map(num=>Math.sin(num)+2)
// let data_y2new=data_x2.map(num=>Math.cos(num)+2)